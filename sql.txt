개체(entity):사람, 장소, 물건 등 여러 속성을 가진 명사
속성(attribute):칼럼(클래스와 유사) 
관계(relationship)

DQL(Data Query Language) 데이터를 원하는 방식으로 조회하는 명령어
DML(Data Manipulation Language) 테이블의 데이터를 저장/수정/삭제하는 명령어
DDL(Data Definition Language) 데이터 관리를 위한 테이블 생성/수정/삭제하는 명령어
TCL(Transaction Control Language) 트랜젝션 데이터의 영구 저장/취소와 관련된 명령어
DCL(Data Control Language) 데이터 사용 권한 관련 명령어

행(row)(튜플)과 열(column)(컬럼)

키는 기본키, 외래키, 후보키, 복합키가 있다.
기본키는 중복되지 않는 유일한 값이며 NULL을 가질 수 없다.
후보키는 기본키가 될 수 있는 키이며, 기본키도 포함돼있다.
보조키(=대체키)는 후보키에 속해있는 키이다.
외래키는 특정 테이블에 포함되어 있으면서 다른 테이블의 기본키로 지정된 키이다.

셀렉션은 행 단위로 원하는 데이터 조회(where)
프로젝션은 열 단위로 원하는 데이터 조회()

distinct	// 중복제거 키워드, select 다음에 입력

null과 연산시 결과값이 null이 된다. 이를 해결하기 위해 nvl/ifnull함수를 쓴다.
select문에서 출력할 컬럼의 이름에 별칭을 붙일 수 있다. '컬럼명' (as) "별칭" 으로 사용하며 별칭은 쌍따옴표로 묶는다.
length()는 길이를, lengthb()는 바이트 수를 반환

///////////오라클 ///////////
create table '테이블명'(
컬럼명 number(7,2),
constraint '컬럼명' '규칙'~~	// 제약조건
);

자료형:
varchar2('길이')	// 4000byte만큼의 가변 길이 문자열
number('전체 자리 수','소수점 자리수'),	// 숫자형으로 선언, 전체 자리 수는 소수점 자리수까지 포함
date

객체
table, index, view, sequence, synonym, procedure, function, package, trigger

order by절에 여러 컬럼을 입력 가능하며, 입력한 순서대로 우선순위가 정해진다.

in은 where절의 연산자로 사용하며 지정한 개체가 주어진 범위에 포함되면 출력한다.

like는 지정한 컬럼값이 주어진 문자열값에 부합하면 출력.
ㄴ '_'는 한 글자, '%'는 여러 글자이다. ex) '_L%' => 두 번째 글자가 L인 모든 컬럼

널 체크는 is null이다.

group by 컬럼,컬럼2... : 열을 기준으로 컬럼을 묶는다.
having 조건 : 그룹화된 컬럼들에 조건을 줄 때 사용한다. where 이후에 실행된다.
순서는 select ~ from ~ where ~ group by ~ having ~ order by~; 이다
rollup함수는 소그룹부터 대그룹의 순서로 그룹별 결과를 출력하고, 마지막에 총 데이터의 결과를 출력한다.

내장 함수는 입력 방식에 따라 데이터 처리에 사용하는 행이 나뉘며, 결과가 하나씩 나오면 단일행 함수, 여러 행이면 다중행 함수이다.
단일행 함수에는 sum, avg, count, min, max가 있다
sum(컬럼) over(order by ~)는 값 점점 누적
median(컬럼): 중앙값 계산

nvl('컬럼명', '대신 들어갈 값')	// 컬럼의 null값을 대신할 값으로 대체한다.
coalesce('컬럼명', '대신 들어갈 값')	// 컬럼의 null값을 대신할 값으로 대체한다.
nvl2('컬럼명', '널이 아닐 때 출력할 값', '널일 때 출력할 값')	// 컬럼의 null값을 대신할 값으로 대체한다.
decode('검사대상(열, 데이터, 연산, 함수결과), 조건1, '참일시 반환할 값', 조건2, '참일시 반환할 값' ... '모든 조건과 다를시 출력할 값'): switch case문과 비슷하다.
case문은 decode와 비슷하게 특정 조건에 따라 반환값을 설정할 때 사용한다.
case 검사대상 when 조건1 then '참일때 반환할 값' when ... else '모든 조건과 다를시 출력할 값' end
검사대상 없이 조건식 만으로도 사용이 가능하다.

집합연산자 union은 두 결과 값의 합집합을 출력하며, 출력 열 개수가 같아야한다. 중복값은 제거된다.
union all은 중복값도 출력한다.
minus는 두 결과 값의 차집합을 출력한다.
intersect는 두 결과 값의 교집합을 출력한다.

substr(문자열, 시작위치, [추출 개수]): 문자열을 시작위치부터 추출 개수만큼 또는 끝까지 반환
시작위치에 음수가 있을 경우, 문자열 마지막부터(-1) 시작 위치까지 1씩 감소한 위치
-5 -4 -3 -2 -1
C  L   E  R  K
instr(문자열, 문자, 시작위치): 문자열에서 시작위치 또는 처음부터 문자의 인덱스를 출력(인덱스는 1부터 시작), 여러개일시 가장 첫번째 것만 반환.
replace(문자열, 찾는문자, 대체할문자): 문자열에서 찾는 문자를 대체할 문자로 대체
lpad(문자열, 데이터 자리수, 채울 문자): 문자열과 데이터 자리수의 차만큼 왼쪽에 채울 문자로 채운다. <=>rpad: 오른쪽에 문자를 채움.
concat(문자열, 문자열): 두 문자열을 합친다.
trim(삭제옵션 삭제할문자 from 문자열): 문자열을 삭제옵션에 따라(기본값 both) 삭제할 문자(기본값 공백)를 삭제.
삭제 옵션은 앞글자를 지우는 leading, 뒷글자를 지우는 trailing, 양쪽 다 지우는 both가 있다.
ltrim(문자열, 삭제할 문자집합): 왼쪽의 지정문자를 삭제한다. 여러 문자를 지정 가능(기본값 공백). <=> rtrim: 오른쪽의 지정문자 삭제
round(숫자, 소수점 반올림위치): 반올림. 반올림위치 전까지 반올림한다(= 소수점 자리수). 위치 기본값은 소수점 첫째자리(=소수점없음). 음수면 정수 부분 반올림.
trunc(숫자, 버림위치): 숫자를 버림 위치까지 버린 후 반환. 기본값 0(=소수점 없음)
translate(데이터, '바꿀글자/숫자집합', '대체할문자집합'): 문자를 대체한 후 반환. 데이터에 영향을 주지 않음.

자동 형변환: 숫자 + 문자열 = 문자열을 숫자로 자동 변환 후 연산
날짜데이터 + 숫자 => 숫자만큼 일수 이후의 날짜
날짜 - 날짜 => 두 날짜 데이터 간의 일수 차이
add_months(날짜, 더할 개월수): 정한 개월 수를 더한 날짜를 출력
months_between(날짜1, 날짜2): 두 날짜간 차이를 개월 수로 계산 후 출력
next_day(날짜, 요일문자): 특정 날짜를 기준으로 돌아오는 요일의 날짜를 출력
last_day(날짜): 특정 날짜가 속한 달의 마지막 날짜 출력

to_char(날짜, 원하는 문자 형태, 'nls_date_language = 언어'): 날짜를 원하는 언어로 지정된 문자형태에 맞게 출력
형식: CC(세기), YYYY(=RRRR), YY, MM(월), MON(월 이름 약자), MONTH(월 이름 전체), DD(일), DDD(1년중 며칠, 1~366), 
DY(요일 이름약자), DAY(요일 이름전체), W(1년중 몇째주, 1~53), HH24(24시간으로 표현한 시간), HH12(=HH, 12시간으로 표현한 시간),
MI(분), SS(초), AM, PM, A.M., P.M.(오전 오후)

to_number(문자열(숫자형태), 숫자형태): 문자열을 원하는 형태로 인식하여 숫자로 변환
형식: 9(숫자 한 자리), 0(빈자리를 0으로 채움), $(달러표시를 붙여 출력), L(지역 화폐 단위 기호를 붙여 출력), .(소수점표시), ,(천 단위 구분기호)
///////////mysql///////////

ifnull('컬럼명', '대신 들어갈 값')	// 컬럼의 null값을 대신할 값으로 대체한다.
